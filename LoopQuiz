public class LoopQuiz {

	public static void main(String[] args) {

		/**
		 * 1) Which looping process checks the test condition at the end of the
		 * loop?
		 * 
		 * [a] for [b] while [c] do-while ----(this is the right answer) letter
		 * C [d] no looping process checks the test condition at the end
		 * 
		 * 
		 * 2) In a group of nested loops, which loop is executed the most number
		 * of times?
		 * 
		 * [a] the outermost loop [b] the innermost loop (this is the Answer b)
		 * [c] all loops are executed the same number of times [d] cannot be
		 * determined without knowing the size of the loops
		 * 
		 *
		 * 3)The statement i++; is equivalent to
		 * 
		 * [a] i = i + i; [b] i = i + 1; (This is the correct answer b) [c] i =
		 * i - 1; [d] i - - ;
		 * 
		 * 4) Which looping process is best used when the number of iterations
		 * is known?
		 * 
		 * [a] for (this the correct answer, a) [b] while [c] do-while [d] all
		 * looping processes require that the iterations be known
		 * 
		 * 5) What's wrong? while( (i < 10) && (i > 24))
		 * 
		 * [a] the logical operator && cannot be used in a test condition [b]
		 * the while loop is an exit-condition loop [c] the test condition is
		 * always false [d] the test condition is always true (this is the
		 * correct answer d)
		 * 
		 * 
		 * 
		 * 6) If there is more than one statement in the block of a for loop,
		 * which of the following must be placed at the beginning and the ending
		 * of the loop block?
		 * 
		 * [a] parentheses ( ) [b] French curly braces { } (This is the correct
		 * answer b) [c] brackets [ ] [d] arrows < >
		 * 
		 * 
		 * 
		 * 7) What value is stored in num at the end of this looping? for (num =
		 * 1; num <= 5; num++)
		 * 
		 * [a] 1 [b] 4 [c] 5 This is the correct answer, letter c. num should
		 * equal 5 [d] 6
		 * 
		 * 
		 * 
		 */
		// 8) write a while program to print even numbers below 20

		int count = 0;
		int evenNumbers = 1;

		while (count <= 20) {

			evenNumbers = evenNumbers + 1;
			if (evenNumbers % 2 == 0) {
				System.out.println("EvenNumber is: " + evenNumbers);
			}
			count++;
		}

		// 9) write a do while program to print odd numbers below 30
		int doCounter = 0;
		int oddNumber = 1;
		do {
			oddNumber = oddNumber + 1;
			if (oddNumber % 2 != 0) {
				System.out.println("OddNumber is: " + oddNumber);
			}
			doCounter++;
		} while (oddNumber < 30);

		// 10) The most basic control flow statement supported by the Java
		// programming language is the _if__ statement.

		// 11) The __switch___ statement allows for any number of possible
		// execution paths.

		// 12) __do-while___ statement is similar to the while statement, but
		// evaluates its expression at the _start__ of the loop.

		// 13) How do you write an infinite loop using the for statement?
		// for(int count = 0; count < = count + 1; count++)

		// 14) How do you write an infinite loop using the while statement?
		/*
		 * int count = 0;
		 * 
		 * while(count > 0) { count ++; System.out.print(count); }
		 * 
		 * *
		 * 
		 * 15) Consider the following code snippet.
		 * 
		 * if (aNumber >= 0) if (aNumber == 0)
		 * System.out.println("first string"); else
		 * System.out.println("second string");
		 * System.out.println("third string"); a) What output do you think the
		 * code will produce if aNumber is 3? "second string" "third string" b)
		 * Write a test program containing the previous code snippet; make
		 * aNumber 3. What is the output of the program? Is it what you
		 * predicted? Explain why the output is what it is; in other words, what
		 * is the control flow for the code snippet? second string third string
		 * aNumber =3 so that means it is true with the first if statement.
		 * aNumber doesn't equal 0 so the second if statement is false. The else
		 * bracket executes. c) Using only spaces and line breaks, reformat the
		 * code snippet to make the control flow easier to understand. int
		 * aNumber = 3;
		 * 
		 * if (aNumber >= 0) { if (aNumber == 0) {
		 * System.out.println("first string"); } } else {
		 * System.out.println("second string");
		 * System.out.println("third string"); }
		 * 
		 * d) Use braces, { and }, to further clarify the code. int aNumber = 3;
		 * 
		 * if ((aNumber >= 0) && (aNumber == 0)) {
		 * 
		 * System.out.println("first string"); } else {
		 * System.out.println("second string");
		 * System.out.println("third string"); }
		 */
		int aNumber = 3;

		if ((aNumber >= 0) && (aNumber == 0)) {

			System.out.println("first string");
		} else {
			System.out.println("second string");
			System.out.println("third string");
		}
		/*
		 * 
		 * 
		 * 
		 * 16) What is the output of this program?
		 * 
		 * class selection_statements { public static void main(String args[]) {
		 * int var1 = 5; int var2 = 6; if ((var2 = 1) == var1)
		 * System.out.print(var2); else System.out.print(++var2); } } a) 1 b)
		 * 2----the output is 2 c) 3 d) 4
		 * 
		 * 
		 * 
		 * 
		 * 17) What is the output of this program?
		 * 
		 * class Output { public static void main(String args[]) { int x, y = 1;
		 * x = 10; if (x != 10 && x / 0 == 0) System.out.println(y); else
		 * System.out.println(++y); } } a) 1 b) 2
		 * -------"This is the answer you get 2" c) Runtime error owing to
		 * division by zero in if condition. d) Unpredictable behavior of
		 * program.
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 
		 * 19) write difference between while and do while ? The while loop
		 * evaluates the condition at the beginning of the loop iteration The do
		 * while executes to start the iteration and then evaluates the
		 * condition last
		 * 
		 * 20) write when to use switch and when to use if else? use a switch
		 * statement when you have int, char, byte, and short as a controlling
		 * statement.
		 * 
		 * Use the if-else statements for everything else in your condition
		 * 
		 * 21) write the use of break ? write program to explain flow of control
		 * using break You need to use a break after each case because if not,
		 * you will execute the matching case and all subsequent cases
		 */

		int y = 10;

		switch (y) {

		case 1:
			System.out.println(y);
			break;
		case 10:
			System.out.println(y);
			break;

		}

		// 18 execute printing loops
		int count1 = 1;

		while (count1 <= 10) {

			System.out.println("*");
			count1++;
			if (count1 == 10) {

				for (int count2 = 0; count2 < 18; count2++)
					System.out.print("*");

			}
		}
		
		System.out.println();
		int count3 = 1;

		while (count3 <= 10) {

			
			
			switch (count3) {
			case 1:
				for (int count5 = 0; count5 < 18; count5++)
					System.out.print("*");
				break;
			case 10:
				for (int count4 = 0; count4 < 18; count4++)
					System.out.print("*");
				break;
			}
			System.out.println("*");
			count3++;
		}
	}

}
